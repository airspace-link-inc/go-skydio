// Code generated by "enumer -type=ReferenceFrame -transform=snake-upper -trimprefix=ReferenceFrame -json"; DO NOT EDIT.

package skydio

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ReferenceFrameName = "NAVGPS"

var _ReferenceFrameIndex = [...]uint8{0, 3, 6}

const _ReferenceFrameLowerName = "navgps"

func (i ReferenceFrame) String() string {
	if i >= ReferenceFrame(len(_ReferenceFrameIndex)-1) {
		return fmt.Sprintf("ReferenceFrame(%d)", i)
	}
	return _ReferenceFrameName[_ReferenceFrameIndex[i]:_ReferenceFrameIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ReferenceFrameNoOp() {
	var x [1]struct{}
	_ = x[ReferenceFrameNav-(0)]
	_ = x[ReferenceFrameGps-(1)]
}

var _ReferenceFrameValues = []ReferenceFrame{ReferenceFrameNav, ReferenceFrameGps}

var _ReferenceFrameNameToValueMap = map[string]ReferenceFrame{
	_ReferenceFrameName[0:3]:      ReferenceFrameNav,
	_ReferenceFrameLowerName[0:3]: ReferenceFrameNav,
	_ReferenceFrameName[3:6]:      ReferenceFrameGps,
	_ReferenceFrameLowerName[3:6]: ReferenceFrameGps,
}

var _ReferenceFrameNames = []string{
	_ReferenceFrameName[0:3],
	_ReferenceFrameName[3:6],
}

// ReferenceFrameString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ReferenceFrameString(s string) (ReferenceFrame, error) {
	if val, ok := _ReferenceFrameNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ReferenceFrameNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ReferenceFrame values", s)
}

// ReferenceFrameValues returns all values of the enum
func ReferenceFrameValues() []ReferenceFrame {
	return _ReferenceFrameValues
}

// ReferenceFrameStrings returns a slice of all String values of the enum
func ReferenceFrameStrings() []string {
	strs := make([]string, len(_ReferenceFrameNames))
	copy(strs, _ReferenceFrameNames)
	return strs
}

// IsAReferenceFrame returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ReferenceFrame) IsAReferenceFrame() bool {
	for _, v := range _ReferenceFrameValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ReferenceFrame
func (i ReferenceFrame) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ReferenceFrame
func (i *ReferenceFrame) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ReferenceFrame should be a string, got %s", data)
	}

	var err error
	*i, err = ReferenceFrameString(s)
	return err
}
