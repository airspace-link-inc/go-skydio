// Code generated by "enumer -type=VehicleClass -transform=title -trimprefix=VehicleClass -json"; DO NOT EDIT.

package skydio

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _VehicleClassName = "SkydioR1Skydio2SkydioX2SkydioX10"

var _VehicleClassIndex = [...]uint8{0, 8, 15, 23, 32}

const _VehicleClassLowerName = "skydior1skydio2skydiox2skydiox10"

func (i VehicleClass) String() string {
	if i >= VehicleClass(len(_VehicleClassIndex)-1) {
		return fmt.Sprintf("VehicleClass(%d)", i)
	}
	return _VehicleClassName[_VehicleClassIndex[i]:_VehicleClassIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _VehicleClassNoOp() {
	var x [1]struct{}
	_ = x[VehicleClassSkydioR1-(0)]
	_ = x[VehicleClassSkydio2-(1)]
	_ = x[VehicleClassSkydioX2-(2)]
	_ = x[VehicleClassSkydioX10-(3)]
}

var _VehicleClassValues = []VehicleClass{VehicleClassSkydioR1, VehicleClassSkydio2, VehicleClassSkydioX2, VehicleClassSkydioX10}

var _VehicleClassNameToValueMap = map[string]VehicleClass{
	_VehicleClassName[0:8]:        VehicleClassSkydioR1,
	_VehicleClassLowerName[0:8]:   VehicleClassSkydioR1,
	_VehicleClassName[8:15]:       VehicleClassSkydio2,
	_VehicleClassLowerName[8:15]:  VehicleClassSkydio2,
	_VehicleClassName[15:23]:      VehicleClassSkydioX2,
	_VehicleClassLowerName[15:23]: VehicleClassSkydioX2,
	_VehicleClassName[23:32]:      VehicleClassSkydioX10,
	_VehicleClassLowerName[23:32]: VehicleClassSkydioX10,
}

var _VehicleClassNames = []string{
	_VehicleClassName[0:8],
	_VehicleClassName[8:15],
	_VehicleClassName[15:23],
	_VehicleClassName[23:32],
}

// VehicleClassString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func VehicleClassString(s string) (VehicleClass, error) {
	if val, ok := _VehicleClassNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _VehicleClassNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to VehicleClass values", s)
}

// VehicleClassValues returns all values of the enum
func VehicleClassValues() []VehicleClass {
	return _VehicleClassValues
}

// VehicleClassStrings returns a slice of all String values of the enum
func VehicleClassStrings() []string {
	strs := make([]string, len(_VehicleClassNames))
	copy(strs, _VehicleClassNames)
	return strs
}

// IsAVehicleClass returns "true" if the value is listed in the enum definition. "false" otherwise
func (i VehicleClass) IsAVehicleClass() bool {
	for _, v := range _VehicleClassValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for VehicleClass
func (i VehicleClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for VehicleClass
func (i *VehicleClass) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("VehicleClass should be a string, got %s", data)
	}

	var err error
	*i, err = VehicleClassString(s)
	return err
}
