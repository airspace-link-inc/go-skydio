// Copyright 2025 The go-skydio AUTHORS. All rights reserved.
//
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package skydio

import (
	"context"
	"net/http"

	"github.com/google/uuid"
)

// Expected response from the schedule mission now API.
type scheduleMissionNowV0Response struct {
	MissionTemplateUUID uuid.UUID `json:"mission_template_uuid"`
}

// Properties that can be used to schedule a mission now.
type ScheduleMissionNowOptions struct {
	MaxDelaySeconds     int        `json:"max_delay_seconds"` // Request times out after max_delay_seconds if the vehicle hasn't picked it up. 60 <= s <= 300 seconds.
	MissionTemplateUUID uuid.UUID  `json:"mission_template_uuid"`
	VehicleSerial       string     `json:"vehicle_serial"`
	IdempotencyKey      *uuid.UUID `json:"-"` // Optional. Unique value generated by the client so that the service will not execute duplicate requests on the same vehicle.
}

// Schedule a mission by mission template ID to run now on an Online vehicle.
// Confirm mission status on vehicle via /vehicle/{vehicle_serial} endpoint.
func (s *MissionsService) ScheduleNow(
	ctx context.Context,
	opts *ScheduleMissionNowOptions,
) (uuid.UUID, error) {
	u := "/api/v0/mission/schedule_now"

	r, err := s.client.newRequest(ctx, http.MethodPost, u, opts)
	if err != nil {
		return uuid.Nil, err
	}

	// If the user passes an Idempotency key include it in the request.
	if opts.IdempotencyKey != nil && *opts.IdempotencyKey != uuid.Nil {
		addIdempotencyKey(r, *opts.IdempotencyKey)
	}

	resp, err := doHTTP[scheduleMissionNowV0Response](ctx, s.client, r)
	if err != nil {
		return uuid.Nil, err
	}

	return resp.MissionTemplateUUID, nil
}
