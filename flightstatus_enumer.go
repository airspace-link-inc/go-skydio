// Code generated by "enumer -type=FlightStatus -transform=snake-upper -trimprefix=FlightStatus -json"; DO NOT EDIT.

package skydio

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _FlightStatusName = "UNKNOWNFLYINGPOST_FLIGHTPREPREST"

var _FlightStatusIndex = [...]uint8{0, 7, 13, 24, 28, 32}

const _FlightStatusLowerName = "unknownflyingpost_flightpreprest"

func (i FlightStatus) String() string {
	if i >= FlightStatus(len(_FlightStatusIndex)-1) {
		return fmt.Sprintf("FlightStatus(%d)", i)
	}
	return _FlightStatusName[_FlightStatusIndex[i]:_FlightStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FlightStatusNoOp() {
	var x [1]struct{}
	_ = x[FlightStatusUnknown-(0)]
	_ = x[FlightStatusFlying-(1)]
	_ = x[FlightStatusPostFlight-(2)]
	_ = x[FlightStatusPrep-(3)]
	_ = x[FlightStatusRest-(4)]
}

var _FlightStatusValues = []FlightStatus{FlightStatusUnknown, FlightStatusFlying, FlightStatusPostFlight, FlightStatusPrep, FlightStatusRest}

var _FlightStatusNameToValueMap = map[string]FlightStatus{
	_FlightStatusName[0:7]:        FlightStatusUnknown,
	_FlightStatusLowerName[0:7]:   FlightStatusUnknown,
	_FlightStatusName[7:13]:       FlightStatusFlying,
	_FlightStatusLowerName[7:13]:  FlightStatusFlying,
	_FlightStatusName[13:24]:      FlightStatusPostFlight,
	_FlightStatusLowerName[13:24]: FlightStatusPostFlight,
	_FlightStatusName[24:28]:      FlightStatusPrep,
	_FlightStatusLowerName[24:28]: FlightStatusPrep,
	_FlightStatusName[28:32]:      FlightStatusRest,
	_FlightStatusLowerName[28:32]: FlightStatusRest,
}

var _FlightStatusNames = []string{
	_FlightStatusName[0:7],
	_FlightStatusName[7:13],
	_FlightStatusName[13:24],
	_FlightStatusName[24:28],
	_FlightStatusName[28:32],
}

// FlightStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FlightStatusString(s string) (FlightStatus, error) {
	if val, ok := _FlightStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FlightStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to FlightStatus values", s)
}

// FlightStatusValues returns all values of the enum
func FlightStatusValues() []FlightStatus {
	return _FlightStatusValues
}

// FlightStatusStrings returns a slice of all String values of the enum
func FlightStatusStrings() []string {
	strs := make([]string, len(_FlightStatusNames))
	copy(strs, _FlightStatusNames)
	return strs
}

// IsAFlightStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i FlightStatus) IsAFlightStatus() bool {
	for _, v := range _FlightStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for FlightStatus
func (i FlightStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for FlightStatus
func (i *FlightStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("FlightStatus should be a string, got %s", data)
	}

	var err error
	*i, err = FlightStatusString(s)
	return err
}
