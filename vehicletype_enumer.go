// Code generated by "enumer -type=VehicleType -transform=title -trimprefix=VehicleType -json"; DO NOT EDIT.

package skydio

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _VehicleTypeName = "R1R3E1X10"

var _VehicleTypeIndex = [...]uint8{0, 2, 4, 6, 9}

const _VehicleTypeLowerName = "r1r3e1x10"

func (i VehicleType) String() string {
	if i >= VehicleType(len(_VehicleTypeIndex)-1) {
		return fmt.Sprintf("VehicleType(%d)", i)
	}
	return _VehicleTypeName[_VehicleTypeIndex[i]:_VehicleTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _VehicleTypeNoOp() {
	var x [1]struct{}
	_ = x[VehicleTypeR1-(0)]
	_ = x[VehicleTypeR3-(1)]
	_ = x[VehicleTypeE1-(2)]
	_ = x[VehicleTypeX10-(3)]
}

var _VehicleTypeValues = []VehicleType{VehicleTypeR1, VehicleTypeR3, VehicleTypeE1, VehicleTypeX10}

var _VehicleTypeNameToValueMap = map[string]VehicleType{
	_VehicleTypeName[0:2]:      VehicleTypeR1,
	_VehicleTypeLowerName[0:2]: VehicleTypeR1,
	_VehicleTypeName[2:4]:      VehicleTypeR3,
	_VehicleTypeLowerName[2:4]: VehicleTypeR3,
	_VehicleTypeName[4:6]:      VehicleTypeE1,
	_VehicleTypeLowerName[4:6]: VehicleTypeE1,
	_VehicleTypeName[6:9]:      VehicleTypeX10,
	_VehicleTypeLowerName[6:9]: VehicleTypeX10,
}

var _VehicleTypeNames = []string{
	_VehicleTypeName[0:2],
	_VehicleTypeName[2:4],
	_VehicleTypeName[4:6],
	_VehicleTypeName[6:9],
}

// VehicleTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func VehicleTypeString(s string) (VehicleType, error) {
	if val, ok := _VehicleTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _VehicleTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to VehicleType values", s)
}

// VehicleTypeValues returns all values of the enum
func VehicleTypeValues() []VehicleType {
	return _VehicleTypeValues
}

// VehicleTypeStrings returns a slice of all String values of the enum
func VehicleTypeStrings() []string {
	strs := make([]string, len(_VehicleTypeNames))
	copy(strs, _VehicleTypeNames)
	return strs
}

// IsAVehicleType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i VehicleType) IsAVehicleType() bool {
	for _, v := range _VehicleTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for VehicleType
func (i VehicleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for VehicleType
func (i *VehicleType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("VehicleType should be a string, got %s", data)
	}

	var err error
	*i, err = VehicleTypeString(s)
	return err
}
