// Code generated by "enumer -type=MissionState -transform=snake-upper -trimprefix=MissionState -json"; DO NOT EDIT.

package skydio

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _MissionStateName = "IN_PROGRESSPAUSEDPOST_MISSION_ACTION"

var _MissionStateIndex = [...]uint8{0, 11, 17, 36}

const _MissionStateLowerName = "in_progresspausedpost_mission_action"

func (i MissionState) String() string {
	if i >= MissionState(len(_MissionStateIndex)-1) {
		return fmt.Sprintf("MissionState(%d)", i)
	}
	return _MissionStateName[_MissionStateIndex[i]:_MissionStateIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MissionStateNoOp() {
	var x [1]struct{}
	_ = x[MissionStateInProgress-(0)]
	_ = x[MissionStatePaused-(1)]
	_ = x[MissionStatePostMissionAction-(2)]
}

var _MissionStateValues = []MissionState{MissionStateInProgress, MissionStatePaused, MissionStatePostMissionAction}

var _MissionStateNameToValueMap = map[string]MissionState{
	_MissionStateName[0:11]:       MissionStateInProgress,
	_MissionStateLowerName[0:11]:  MissionStateInProgress,
	_MissionStateName[11:17]:      MissionStatePaused,
	_MissionStateLowerName[11:17]: MissionStatePaused,
	_MissionStateName[17:36]:      MissionStatePostMissionAction,
	_MissionStateLowerName[17:36]: MissionStatePostMissionAction,
}

var _MissionStateNames = []string{
	_MissionStateName[0:11],
	_MissionStateName[11:17],
	_MissionStateName[17:36],
}

// MissionStateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MissionStateString(s string) (MissionState, error) {
	if val, ok := _MissionStateNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _MissionStateNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MissionState values", s)
}

// MissionStateValues returns all values of the enum
func MissionStateValues() []MissionState {
	return _MissionStateValues
}

// MissionStateStrings returns a slice of all String values of the enum
func MissionStateStrings() []string {
	strs := make([]string, len(_MissionStateNames))
	copy(strs, _MissionStateNames)
	return strs
}

// IsAMissionState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MissionState) IsAMissionState() bool {
	for _, v := range _MissionStateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MissionState
func (i MissionState) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MissionState
func (i *MissionState) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MissionState should be a string, got %s", data)
	}

	var err error
	*i, err = MissionStateString(s)
	return err
}
