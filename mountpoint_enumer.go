// Code generated by "enumer -type=MountPoint -transform=snake-upper -trimprefix=MountPoint"; DO NOT EDIT.

package skydio

import (
	"fmt"
	"strings"
)

const _MountPointName = "TOPBOTTOMLEFTRIGHT"

var _MountPointIndex = [...]uint8{0, 3, 9, 13, 18}

const _MountPointLowerName = "topbottomleftright"

func (i MountPoint) String() string {
	if i >= MountPoint(len(_MountPointIndex)-1) {
		return fmt.Sprintf("MountPoint(%d)", i)
	}
	return _MountPointName[_MountPointIndex[i]:_MountPointIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MountPointNoOp() {
	var x [1]struct{}
	_ = x[MountPointTop-(0)]
	_ = x[MountPointBottom-(1)]
	_ = x[MountPointLeft-(2)]
	_ = x[MountPointRight-(3)]
}

var _MountPointValues = []MountPoint{MountPointTop, MountPointBottom, MountPointLeft, MountPointRight}

var _MountPointNameToValueMap = map[string]MountPoint{
	_MountPointName[0:3]:        MountPointTop,
	_MountPointLowerName[0:3]:   MountPointTop,
	_MountPointName[3:9]:        MountPointBottom,
	_MountPointLowerName[3:9]:   MountPointBottom,
	_MountPointName[9:13]:       MountPointLeft,
	_MountPointLowerName[9:13]:  MountPointLeft,
	_MountPointName[13:18]:      MountPointRight,
	_MountPointLowerName[13:18]: MountPointRight,
}

var _MountPointNames = []string{
	_MountPointName[0:3],
	_MountPointName[3:9],
	_MountPointName[9:13],
	_MountPointName[13:18],
}

// MountPointString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MountPointString(s string) (MountPoint, error) {
	if val, ok := _MountPointNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _MountPointNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MountPoint values", s)
}

// MountPointValues returns all values of the enum
func MountPointValues() []MountPoint {
	return _MountPointValues
}

// MountPointStrings returns a slice of all String values of the enum
func MountPointStrings() []string {
	strs := make([]string, len(_MountPointNames))
	copy(strs, _MountPointNames)
	return strs
}

// IsAMountPoint returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MountPoint) IsAMountPoint() bool {
	for _, v := range _MountPointValues {
		if i == v {
			return true
		}
	}
	return false
}
