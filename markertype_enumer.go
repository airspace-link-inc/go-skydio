// Code generated by "enumer -type=MarkerType -transform=snake-upper -trimprefix=MarkerType -json"; DO NOT EDIT.

package skydio

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _MarkerTypeName = "INCIDENT"

var _MarkerTypeIndex = [...]uint8{0, 8}

const _MarkerTypeLowerName = "incident"

func (i MarkerType) String() string {
	if i >= MarkerType(len(_MarkerTypeIndex)-1) {
		return fmt.Sprintf("MarkerType(%d)", i)
	}
	return _MarkerTypeName[_MarkerTypeIndex[i]:_MarkerTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MarkerTypeNoOp() {
	var x [1]struct{}
	_ = x[MarkerTypeIncident-(0)]
}

var _MarkerTypeValues = []MarkerType{MarkerTypeIncident}

var _MarkerTypeNameToValueMap = map[string]MarkerType{
	_MarkerTypeName[0:8]:      MarkerTypeIncident,
	_MarkerTypeLowerName[0:8]: MarkerTypeIncident,
}

var _MarkerTypeNames = []string{
	_MarkerTypeName[0:8],
}

// MarkerTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MarkerTypeString(s string) (MarkerType, error) {
	if val, ok := _MarkerTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _MarkerTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MarkerType values", s)
}

// MarkerTypeValues returns all values of the enum
func MarkerTypeValues() []MarkerType {
	return _MarkerTypeValues
}

// MarkerTypeStrings returns a slice of all String values of the enum
func MarkerTypeStrings() []string {
	strs := make([]string, len(_MarkerTypeNames))
	copy(strs, _MarkerTypeNames)
	return strs
}

// IsAMarkerType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MarkerType) IsAMarkerType() bool {
	for _, v := range _MarkerTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MarkerType
func (i MarkerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MarkerType
func (i *MarkerType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MarkerType should be a string, got %s", data)
	}

	var err error
	*i, err = MarkerTypeString(s)
	return err
}
