// Code generated by "enumer -type=DockType -transform=snake-upper -trimprefix=DockType"; DO NOT EDIT.

package skydio

import (
	"fmt"
	"strings"
)

const _DockTypeName = "DOCKLITEX10_DOCK"

var _DockTypeIndex = [...]uint8{0, 4, 8, 16}

const _DockTypeLowerName = "docklitex10_dock"

func (i DockType) String() string {
	if i >= DockType(len(_DockTypeIndex)-1) {
		return fmt.Sprintf("DockType(%d)", i)
	}
	return _DockTypeName[_DockTypeIndex[i]:_DockTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DockTypeNoOp() {
	var x [1]struct{}
	_ = x[DockTypeDock-(0)]
	_ = x[DockTypeLite-(1)]
	_ = x[DockTypeX10Dock-(2)]
}

var _DockTypeValues = []DockType{DockTypeDock, DockTypeLite, DockTypeX10Dock}

var _DockTypeNameToValueMap = map[string]DockType{
	_DockTypeName[0:4]:       DockTypeDock,
	_DockTypeLowerName[0:4]:  DockTypeDock,
	_DockTypeName[4:8]:       DockTypeLite,
	_DockTypeLowerName[4:8]:  DockTypeLite,
	_DockTypeName[8:16]:      DockTypeX10Dock,
	_DockTypeLowerName[8:16]: DockTypeX10Dock,
}

var _DockTypeNames = []string{
	_DockTypeName[0:4],
	_DockTypeName[4:8],
	_DockTypeName[8:16],
}

// DockTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DockTypeString(s string) (DockType, error) {
	if val, ok := _DockTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DockTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DockType values", s)
}

// DockTypeValues returns all values of the enum
func DockTypeValues() []DockType {
	return _DockTypeValues
}

// DockTypeStrings returns a slice of all String values of the enum
func DockTypeStrings() []string {
	strs := make([]string, len(_DockTypeNames))
	copy(strs, _DockTypeNames)
	return strs
}

// IsADockType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DockType) IsADockType() bool {
	for _, v := range _DockTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
