// Code generated by "enumer -type=AttachmentType -transform=snake-upper -trimprefix=AttachmentType -json"; DO NOT EDIT.

package skydio

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _AttachmentTypeName = "SPOTLIGHTNIGHTSENSESPEAKER_AND_MIC"

var _AttachmentTypeIndex = [...]uint8{0, 9, 19, 34}

const _AttachmentTypeLowerName = "spotlightnightsensespeaker_and_mic"

func (i AttachmentType) String() string {
	if i >= AttachmentType(len(_AttachmentTypeIndex)-1) {
		return fmt.Sprintf("AttachmentType(%d)", i)
	}
	return _AttachmentTypeName[_AttachmentTypeIndex[i]:_AttachmentTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AttachmentTypeNoOp() {
	var x [1]struct{}
	_ = x[AttachmentTypeSpotlight-(0)]
	_ = x[AttachmentTypeNightsense-(1)]
	_ = x[AttachmentTypeSpeakerAndMic-(2)]
}

var _AttachmentTypeValues = []AttachmentType{AttachmentTypeSpotlight, AttachmentTypeNightsense, AttachmentTypeSpeakerAndMic}

var _AttachmentTypeNameToValueMap = map[string]AttachmentType{
	_AttachmentTypeName[0:9]:        AttachmentTypeSpotlight,
	_AttachmentTypeLowerName[0:9]:   AttachmentTypeSpotlight,
	_AttachmentTypeName[9:19]:       AttachmentTypeNightsense,
	_AttachmentTypeLowerName[9:19]:  AttachmentTypeNightsense,
	_AttachmentTypeName[19:34]:      AttachmentTypeSpeakerAndMic,
	_AttachmentTypeLowerName[19:34]: AttachmentTypeSpeakerAndMic,
}

var _AttachmentTypeNames = []string{
	_AttachmentTypeName[0:9],
	_AttachmentTypeName[9:19],
	_AttachmentTypeName[19:34],
}

// AttachmentTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AttachmentTypeString(s string) (AttachmentType, error) {
	if val, ok := _AttachmentTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AttachmentTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AttachmentType values", s)
}

// AttachmentTypeValues returns all values of the enum
func AttachmentTypeValues() []AttachmentType {
	return _AttachmentTypeValues
}

// AttachmentTypeStrings returns a slice of all String values of the enum
func AttachmentTypeStrings() []string {
	strs := make([]string, len(_AttachmentTypeNames))
	copy(strs, _AttachmentTypeNames)
	return strs
}

// IsAAttachmentType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AttachmentType) IsAAttachmentType() bool {
	for _, v := range _AttachmentTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for AttachmentType
func (i AttachmentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AttachmentType
func (i *AttachmentType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AttachmentType should be a string, got %s", data)
	}

	var err error
	*i, err = AttachmentTypeString(s)
	return err
}
