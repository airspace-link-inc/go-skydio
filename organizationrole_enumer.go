// Code generated by "enumer -type=OrganizationRole -transform=snake-upper -trimprefix=OrganizationRole -json"; DO NOT EDIT.

package skydio

import (
	"encoding/json"
	"fmt"
)

func (i OrganizationRole) String() string {
	return string(i)
}

// OrganizationRoleString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OrganizationRoleString(s string) (OrganizationRole, error) {
	orgRole := OrganizationRole(s)

	if orgRole.IsAOrganizationRole() {
		return orgRole, nil
	}

	return OrganizationRole(""), fmt.Errorf(
		"%s does not belong to OrganizationRole values",
		s,
	)
}

// OrganizationRoleValues returns all values of the enum
func OrganizationRoleValues() []OrganizationRole {
	return []OrganizationRole{
		OrganizationRoleMember,
		OrganizationRoleTester,
		OrganizationRoleModerator,
		OrganizationRoleAdmin,
		OrganizationRoleRemotePilot,
	}
}

// OrganizationRoleStrings returns a slice of all String values of the enum
func OrganizationRoleStrings() []string {
	vals := OrganizationRoleValues()
	strs := make([]string, len(vals))

	for i, val := range vals {
		strs[i] = val.String()
	}

	return strs
}

// IsAOrganizationRole returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OrganizationRole) IsAOrganizationRole() bool {
	switch i {
	case
		OrganizationRoleMember,
		OrganizationRoleTester,
		OrganizationRoleModerator,
		OrganizationRoleAdmin,
		OrganizationRoleRemotePilot:
		return true
	}

	return false
}

// MarshalJSON implements the json.Marshaler interface for OrganizationRole
func (i OrganizationRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for OrganizationRole
func (i *OrganizationRole) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("OrganizationRole should be a string, got %s", data)
	}

	var err error
	*i, err = OrganizationRoleString(s)
	return err
}
