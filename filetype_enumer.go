// Code generated by "enumer -type=FileType -transform=title-lower -trimprefix=FileType"; DO NOT EDIT.

package skydio

import (
	"fmt"
	"strings"
)

const _FileTypeName = "vehicleImagevehicleImageDngvehicleIrImagevehicleRadiometrucImagevehicleVideoPreviewvechcleVideoRawvehicleTelemetryCsv"

var _FileTypeIndex = [...]uint8{0, 12, 27, 41, 64, 83, 98, 117}

const _FileTypeLowerName = "vehicleimagevehicleimagedngvehicleirimagevehicleradiometrucimagevehiclevideopreviewvechclevideorawvehicletelemetrycsv"

func (i FileType) String() string {
	if i >= FileType(len(_FileTypeIndex)-1) {
		return fmt.Sprintf("FileType(%d)", i)
	}
	return _FileTypeName[_FileTypeIndex[i]:_FileTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FileTypeNoOp() {
	var x [1]struct{}
	_ = x[FileTypeVehicleImage-(0)]
	_ = x[FileTypeVehicleImageDng-(1)]
	_ = x[FileTypeVehicleIrImage-(2)]
	_ = x[FileTypeVehicleRadiometrucImage-(3)]
	_ = x[FileTypeVehicleVideoPreview-(4)]
	_ = x[FileTypeVechcleVideoRaw-(5)]
	_ = x[FileTypeVehicleTelemetryCsv-(6)]
}

var _FileTypeValues = []FileType{FileTypeVehicleImage, FileTypeVehicleImageDng, FileTypeVehicleIrImage, FileTypeVehicleRadiometrucImage, FileTypeVehicleVideoPreview, FileTypeVechcleVideoRaw, FileTypeVehicleTelemetryCsv}

var _FileTypeNameToValueMap = map[string]FileType{
	_FileTypeName[0:12]:        FileTypeVehicleImage,
	_FileTypeLowerName[0:12]:   FileTypeVehicleImage,
	_FileTypeName[12:27]:       FileTypeVehicleImageDng,
	_FileTypeLowerName[12:27]:  FileTypeVehicleImageDng,
	_FileTypeName[27:41]:       FileTypeVehicleIrImage,
	_FileTypeLowerName[27:41]:  FileTypeVehicleIrImage,
	_FileTypeName[41:64]:       FileTypeVehicleRadiometrucImage,
	_FileTypeLowerName[41:64]:  FileTypeVehicleRadiometrucImage,
	_FileTypeName[64:83]:       FileTypeVehicleVideoPreview,
	_FileTypeLowerName[64:83]:  FileTypeVehicleVideoPreview,
	_FileTypeName[83:98]:       FileTypeVechcleVideoRaw,
	_FileTypeLowerName[83:98]:  FileTypeVechcleVideoRaw,
	_FileTypeName[98:117]:      FileTypeVehicleTelemetryCsv,
	_FileTypeLowerName[98:117]: FileTypeVehicleTelemetryCsv,
}

var _FileTypeNames = []string{
	_FileTypeName[0:12],
	_FileTypeName[12:27],
	_FileTypeName[27:41],
	_FileTypeName[41:64],
	_FileTypeName[64:83],
	_FileTypeName[83:98],
	_FileTypeName[98:117],
}

// FileTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FileTypeString(s string) (FileType, error) {
	if val, ok := _FileTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FileTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to FileType values", s)
}

// FileTypeValues returns all values of the enum
func FileTypeValues() []FileType {
	return _FileTypeValues
}

// FileTypeStrings returns a slice of all String values of the enum
func FileTypeStrings() []string {
	strs := make([]string, len(_FileTypeNames))
	copy(strs, _FileTypeNames)
	return strs
}

// IsAFileType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i FileType) IsAFileType() bool {
	for _, v := range _FileTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
