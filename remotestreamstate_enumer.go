// Code generated by "enumer -type=RemoteStreamState -transform=snake-lower -trimprefix=RemoteStreamState -json"; DO NOT EDIT.

package skydio

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _RemoteStreamStateName = "DisabledPendingActiveBlockedDeviceOfflineDeviceUnsupported"

var _RemoteStreamStateIndex = [...]uint8{0, 8, 15, 21, 28, 41, 58}

const _RemoteStreamStateLowerName = "disabledpendingactiveblockeddeviceofflinedeviceunsupported"

func (i RemoteStreamState) String() string {
	if i >= RemoteStreamState(len(_RemoteStreamStateIndex)-1) {
		return fmt.Sprintf("RemoteStreamState(%d)", i)
	}
	return _RemoteStreamStateName[_RemoteStreamStateIndex[i]:_RemoteStreamStateIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _RemoteStreamStateNoOp() {
	var x [1]struct{}
	_ = x[RemoteStreamStateDisabled-(0)]
	_ = x[RemoteStreamStatePending-(1)]
	_ = x[RemoteStreamStateActive-(2)]
	_ = x[RemoteStreamStateBlocked-(3)]
	_ = x[RemoteStreamStateDeviceOffline-(4)]
	_ = x[RemoteStreamStateDeviceUnsupported-(5)]
}

var _RemoteStreamStateValues = []RemoteStreamState{RemoteStreamStateDisabled, RemoteStreamStatePending, RemoteStreamStateActive, RemoteStreamStateBlocked, RemoteStreamStateDeviceOffline, RemoteStreamStateDeviceUnsupported}

var _RemoteStreamStateNameToValueMap = map[string]RemoteStreamState{
	_RemoteStreamStateName[0:8]:        RemoteStreamStateDisabled,
	_RemoteStreamStateLowerName[0:8]:   RemoteStreamStateDisabled,
	_RemoteStreamStateName[8:15]:       RemoteStreamStatePending,
	_RemoteStreamStateLowerName[8:15]:  RemoteStreamStatePending,
	_RemoteStreamStateName[15:21]:      RemoteStreamStateActive,
	_RemoteStreamStateLowerName[15:21]: RemoteStreamStateActive,
	_RemoteStreamStateName[21:28]:      RemoteStreamStateBlocked,
	_RemoteStreamStateLowerName[21:28]: RemoteStreamStateBlocked,
	_RemoteStreamStateName[28:41]:      RemoteStreamStateDeviceOffline,
	_RemoteStreamStateLowerName[28:41]: RemoteStreamStateDeviceOffline,
	_RemoteStreamStateName[41:58]:      RemoteStreamStateDeviceUnsupported,
	_RemoteStreamStateLowerName[41:58]: RemoteStreamStateDeviceUnsupported,
}

var _RemoteStreamStateNames = []string{
	_RemoteStreamStateName[0:8],
	_RemoteStreamStateName[8:15],
	_RemoteStreamStateName[15:21],
	_RemoteStreamStateName[21:28],
	_RemoteStreamStateName[28:41],
	_RemoteStreamStateName[41:58],
}

// RemoteStreamStateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func RemoteStreamStateString(s string) (RemoteStreamState, error) {
	if val, ok := _RemoteStreamStateNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _RemoteStreamStateNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to RemoteStreamState values", s)
}

// RemoteStreamStateValues returns all values of the enum
func RemoteStreamStateValues() []RemoteStreamState {
	return _RemoteStreamStateValues
}

// RemoteStreamStateStrings returns a slice of all String values of the enum
func RemoteStreamStateStrings() []string {
	strs := make([]string, len(_RemoteStreamStateNames))
	copy(strs, _RemoteStreamStateNames)
	return strs
}

// IsARemoteStreamState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i RemoteStreamState) IsARemoteStreamState() bool {
	for _, v := range _RemoteStreamStateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for RemoteStreamState
func (i RemoteStreamState) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for RemoteStreamState
func (i *RemoteStreamState) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("RemoteStreamState should be a string, got %s", data)
	}

	var err error
	*i, err = RemoteStreamStateString(s)
	return err
}
