// Code generated by "enumer -type=AlertType -transform=snake-upper -trimprefix=AlertType -json"; DO NOT EDIT.

package skydio

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _AlertTypeName = "ALERT_TIME_HUMAN_DETECTEDALERT_TIME_MISSION_INCOMPLETEALERT_TIME_DOCK_ERRORALERT_TIME_SCHEDULED_MISSION_FAILED_TAKEOFFALERT_TIME_FLIGHT_STATUSALERT_TIME_ONLINE_STATUSALERT_TIME_MEDIA_FILE_AVAILABLEALERT_TIME_MEDIA_AVAILABLE_FOR_SCANALERT_TIME_TELEMETRY_AVAILABLEALERT_TIME_WAYPOINT_PROGRESSALERT_TIME_LIVE_STREAM_STATUS_CHANGED"

var _AlertTypeIndex = [...]uint16{0, 25, 54, 75, 118, 142, 166, 197, 232, 262, 290, 327}

const _AlertTypeLowerName = "alert_time_human_detectedalert_time_mission_incompletealert_time_dock_erroralert_time_scheduled_mission_failed_takeoffalert_time_flight_statusalert_time_online_statusalert_time_media_file_availablealert_time_media_available_for_scanalert_time_telemetry_availablealert_time_waypoint_progressalert_time_live_stream_status_changed"

func (i AlertType) String() string {
	if i >= AlertType(len(_AlertTypeIndex)-1) {
		return fmt.Sprintf("AlertType(%d)", i)
	}
	return _AlertTypeName[_AlertTypeIndex[i]:_AlertTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AlertTypeNoOp() {
	var x [1]struct{}
	_ = x[AlertTimeHumanDetected-(0)]
	_ = x[AlertTimeMissionIncomplete-(1)]
	_ = x[AlertTimeDockError-(2)]
	_ = x[AlertTimeScheduledMissionFailedTakeoff-(3)]
	_ = x[AlertTimeFlightStatus-(4)]
	_ = x[AlertTimeOnlineStatus-(5)]
	_ = x[AlertTimeMediaFileAvailable-(6)]
	_ = x[AlertTimeMediaAvailableForScan-(7)]
	_ = x[AlertTimeTelemetryAvailable-(8)]
	_ = x[AlertTimeWaypointProgress-(9)]
	_ = x[AlertTimeLiveStreamStatusChanged-(10)]
}

var _AlertTypeValues = []AlertType{AlertTimeHumanDetected, AlertTimeMissionIncomplete, AlertTimeDockError, AlertTimeScheduledMissionFailedTakeoff, AlertTimeFlightStatus, AlertTimeOnlineStatus, AlertTimeMediaFileAvailable, AlertTimeMediaAvailableForScan, AlertTimeTelemetryAvailable, AlertTimeWaypointProgress, AlertTimeLiveStreamStatusChanged}

var _AlertTypeNameToValueMap = map[string]AlertType{
	_AlertTypeName[0:25]:         AlertTimeHumanDetected,
	_AlertTypeLowerName[0:25]:    AlertTimeHumanDetected,
	_AlertTypeName[25:54]:        AlertTimeMissionIncomplete,
	_AlertTypeLowerName[25:54]:   AlertTimeMissionIncomplete,
	_AlertTypeName[54:75]:        AlertTimeDockError,
	_AlertTypeLowerName[54:75]:   AlertTimeDockError,
	_AlertTypeName[75:118]:       AlertTimeScheduledMissionFailedTakeoff,
	_AlertTypeLowerName[75:118]:  AlertTimeScheduledMissionFailedTakeoff,
	_AlertTypeName[118:142]:      AlertTimeFlightStatus,
	_AlertTypeLowerName[118:142]: AlertTimeFlightStatus,
	_AlertTypeName[142:166]:      AlertTimeOnlineStatus,
	_AlertTypeLowerName[142:166]: AlertTimeOnlineStatus,
	_AlertTypeName[166:197]:      AlertTimeMediaFileAvailable,
	_AlertTypeLowerName[166:197]: AlertTimeMediaFileAvailable,
	_AlertTypeName[197:232]:      AlertTimeMediaAvailableForScan,
	_AlertTypeLowerName[197:232]: AlertTimeMediaAvailableForScan,
	_AlertTypeName[232:262]:      AlertTimeTelemetryAvailable,
	_AlertTypeLowerName[232:262]: AlertTimeTelemetryAvailable,
	_AlertTypeName[262:290]:      AlertTimeWaypointProgress,
	_AlertTypeLowerName[262:290]: AlertTimeWaypointProgress,
	_AlertTypeName[290:327]:      AlertTimeLiveStreamStatusChanged,
	_AlertTypeLowerName[290:327]: AlertTimeLiveStreamStatusChanged,
}

var _AlertTypeNames = []string{
	_AlertTypeName[0:25],
	_AlertTypeName[25:54],
	_AlertTypeName[54:75],
	_AlertTypeName[75:118],
	_AlertTypeName[118:142],
	_AlertTypeName[142:166],
	_AlertTypeName[166:197],
	_AlertTypeName[197:232],
	_AlertTypeName[232:262],
	_AlertTypeName[262:290],
	_AlertTypeName[290:327],
}

// AlertTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AlertTypeString(s string) (AlertType, error) {
	if val, ok := _AlertTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AlertTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AlertType values", s)
}

// AlertTypeValues returns all values of the enum
func AlertTypeValues() []AlertType {
	return _AlertTypeValues
}

// AlertTypeStrings returns a slice of all String values of the enum
func AlertTypeStrings() []string {
	strs := make([]string, len(_AlertTypeNames))
	copy(strs, _AlertTypeNames)
	return strs
}

// IsAAlertType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AlertType) IsAAlertType() bool {
	for _, v := range _AlertTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for AlertType
func (i AlertType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AlertType
func (i *AlertType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AlertType should be a string, got %s", data)
	}

	var err error
	*i, err = AlertTypeString(s)
	return err
}
